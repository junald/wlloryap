/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmployeeInformation.java
 *
 * Created on Sep 27, 2010, 1:13:42 PM
 */
package com.jcl.reports;

import com.jcl.main.MainApp;
import com.jcl.observables.PanelMessage;
import com.jcl.utilities.MyDateFormatter;
import com.jcl.utilities.TransactionException;
import com.jcl.verycommon.JOptionErrorMessage;
import com.jcl.utils.JPanelProgress;
import com.jcl.utils.KeyValue;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author jlavador
 */
public class EmployeeReport extends javax.swing.JPanel {

    private KeyValue selectedReport;
    private boolean isInitializing = false;

    /** Creates new form EmployeeInformation */
    public EmployeeReport() {

        initComponents();

        initScreen(false);

        initComboBoxes();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        panelTop = new javax.swing.JPanel();
        panelBottom = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        panelCenter = new javax.swing.JPanel();
        panelReportViewer = new javax.swing.JPanel();
        panelLeft = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboReports = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        panelTransactionDate = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtFromDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel10 = new javax.swing.JLabel();
        txtToDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        comboClient = new javax.swing.JComboBox();
        panelGrower = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnGenerate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new java.awt.BorderLayout());

        panelTop.setMinimumSize(new java.awt.Dimension(0, 5));
        panelTop.setPreferredSize(new java.awt.Dimension(750, 5));

        javax.swing.GroupLayout panelTopLayout = new javax.swing.GroupLayout(panelTop);
        panelTop.setLayout(panelTopLayout);
        panelTopLayout.setHorizontalGroup(
            panelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1322, Short.MAX_VALUE)
        );
        panelTopLayout.setVerticalGroup(
            panelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        add(panelTop, java.awt.BorderLayout.PAGE_START);

        panelBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBottom.setMinimumSize(new java.awt.Dimension(0, 32));
        panelBottom.setPreferredSize(new java.awt.Dimension(750, 40));
        panelBottom.setLayout(new java.awt.GridBagLayout());

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelBottom.add(btnClose, gridBagConstraints);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panelBottom.add(jPanel5, gridBagConstraints);

        add(panelBottom, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setDividerLocation(375);

        panelCenter.setLayout(new java.awt.GridBagLayout());

        panelReportViewer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelReportViewer.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelCenter.add(panelReportViewer, gridBagConstraints);

        jSplitPane1.setRightComponent(panelCenter);

        panelLeft.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBackground(javax.swing.UIManager.getDefaults().getColor("inactiveCaption"));
        jPanel6.setMinimumSize(new java.awt.Dimension(98, 32));
        jPanel6.setPreferredSize(new java.awt.Dimension(103, 32));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Report Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel6.add(jLabel5, gridBagConstraints);

        comboReports.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboReports.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SSS ", "PHILHEALTH", "WITH HOLDING TAX", "PAG-IBIG", " " }));
        comboReports.setNextFocusableComponent(comboClient);
        comboReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboReportsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(comboReports, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panelLeft.add(jPanel6, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        panelTransactionDate.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), null));
        panelTransactionDate.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        panelTransactionDate.add(jLabel9, gridBagConstraints);

        txtFromDate.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        panelTransactionDate.add(txtFromDate, gridBagConstraints);

        jLabel10.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        panelTransactionDate.add(jLabel10, gridBagConstraints);

        txtToDate.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelTransactionDate.add(txtToDate, gridBagConstraints);

        jLabel6.setText("Supplier/Grower");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        panelTransactionDate.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        panelTransactionDate.add(comboClient, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(panelTransactionDate, gridBagConstraints);

        panelGrower.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(panelGrower, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnGenerate.setText("Generate Report");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        jPanel2.add(btnGenerate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel2, gridBagConstraints);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelLeft.add(jPanel1, gridBagConstraints);

        jSplitPane1.setLeftComponent(panelLeft);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        MainApp.messagePanelObservable.callObserver(new PanelMessage("Report1", "remove"));
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed

        panelReportViewer.removeAll();
        panelReportViewer.add(new JPanelProgress());
        panelReportViewer.updateUI();
        btnGenerate.setEnabled(false);

        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                generateReport();
            }
        });
        t.start();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void generateReport() {
//        try {
//
//
//
//            if (selectedReport.getValue().equals("Separator")) {
//                return;
//            }
//
//            CompanySetting cs = CompanySetting.companySetting();
//
//            Date fDate = txtFromDate.getDate();
//            Date tDate = txtToDate.getDate();
//            boolean checkDJ = false;
//            HashMap parameters = new HashMap();
//            JRViewer jrv = null;
//            HashMap<String, InventoryBalance> hmap = null;
//            List<InventoryBalance> list = null;
//            if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalance)) {
//
//                parameters.put("REPORT_TITLE", cs.getCompanyName());
//                parameters.put("CLIENT_INFO", "Inventory on hand");
//
//                hmap = Inventory.getInventoryBalance();
//                list = new ArrayList<InventoryBalance>(hmap.values());
//                checkDJ = false;
//
//            } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceSupplier)) {
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                Client c = null;
//                if (kv != null) {
//                    c = (Client) kv.getValue();
//                }
//                if (c == null) {
//                    throw new TransactionException("Please select supplier/vendor.");
//                }
//                parameters.put("CLIENT_INFO", c.getCompanyName());
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Supplier Inventory");
//
//
//                hmap = Inventory.getInventoryBalancePerSupplier(c);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//                checkDJ = false;
//            } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalancePerGrower)) {
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                Client c = null;
//                if (kv != null) {
//                    c = (Client) kv.getValue();
//                }
//                if (c == null) {
//                    throw new TransactionException("Please select grower.");
//                }
//                parameters.put("CLIENT_INFO", c.getCompanyName() + "-" + c.getCode());
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Grower Inventory");
//                hmap = Inventory.getInventoryBalanceAllGrower(new Date(), c);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//                checkDJ = false;
//            } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalancePerGrowerWeekly)) {
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                Client c = null;
//                if (kv != null) {
//                    c = (Client) kv.getValue();
//                }
//                if (c == null) {
//                    throw new TransactionException("Please select grower.");
//                }
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (cut off) dates.! ");
//                }
//
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = "Cut off date: " + sdf.format(fDate);
//
//                parameters.put("CLIENT_INFO", c.getCompanyName() + "-" + c.getCode());
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Grower Weekly Inventory");
//                parameters.put("DATE_FROMTO", datefrom_to);
//                hmap = Inventory.getInventoryBalanceAllWeekly(fDate, c);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//                Collections.sort(list, new DateComparator());
//
//
//                checkDJ = false;
//            } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceAllGrowerWeekly)) {
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (cut off) dates.! ");
//                }
//
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = "Cut off date: " + sdf.format(fDate);
//
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - All Grower Weekly Inventory");
//                parameters.put("DATE_FROMTO", datefrom_to);
//                hmap = Inventory.getInventoryBalanceAllWeekly(fDate, null);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//                checkDJ = false;
//            } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceAllGrower)) {
//
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - All Grower Material Inventory");
//                hmap = Inventory.getInventoryBalanceAllGrower(new Date(), null);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//            } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceAllGrowerCrossTab)) {
//
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - All Grower Material Inventory(Crosstab)");
//                hmap = Inventory.getInventoryBalanceAllGrower(new Date(), null);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//
//            } else if (selectedReport.getValue().equals(InventoryTemplate.TotalDeliveriesAllGrower)) {
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (from) dates.! ");
//                }
//                if (tDate == null) {
//                    throw new TransactionException("Plese enter correct (to) dates.! ");
//                }
//
//                if (fDate.after(tDate)) {
//                    throw new TransactionException("Plese enter correct dates.!\n(to) date must be greater than (from) date");
//                }
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = sdf.format(fDate) + " - " + sdf.format(tDate);
//
//                parameters.put("DATE_FROMTO", datefrom_to);
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Total Boxes Deliveries");
//                hmap = Inventory.getInventoryBTotalDeliveriesAllGrower(fDate, tDate);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//
//            } else if (selectedReport.getValue().equals(InventoryTemplate.TotalDeliveriesPerGrowerWeekly)) {
//
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                Client c = null;
//                if (kv != null) {
//                    c = (Client) kv.getValue();
//                }
//                if (c == null) {
//                    throw new TransactionException("Please select grower.");
//                }
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (from) dates.! ");
//                }
//                if (tDate == null) {
//                    throw new TransactionException("Plese enter correct (to) dates.! ");
//                }
//
//                if (fDate.after(tDate)) {
//                    throw new TransactionException("Plese enter correct dates.!\n(to) date must be greater than (from) date");
//                }
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = sdf.format(fDate) + " - " + sdf.format(tDate);
//
//                parameters.put("CLIENT_INFO", c.getCompanyName() + "-" + c.getCode());
//                parameters.put("DATE_FROMTO", datefrom_to);
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Weekly Total Boxes Deliveries");
//                hmap = Inventory.getInventoryBTotalDeliveriesPerGrowerWeekly(fDate, tDate, c);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//
//            } else if (selectedReport.getValue().equals(InventoryTemplate.TotalDeliveriesPerGrowerDaily)) {
//
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                Client c = null;
//                if (kv != null) {
//                    c = (Client) kv.getValue();
//                }
//                if (c == null) {
//                    throw new TransactionException("Please select grower.");
//                }
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (from) dates.! ");
//                }
//                if (tDate == null) {
//                    throw new TransactionException("Plese enter correct (to) dates.! ");
//                }
//
//                if (fDate.after(tDate)) {
//                    throw new TransactionException("Plese enter correct dates.!\n(to) date must be greater than (from) date");
//                }
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = sdf.format(fDate) + " - " + sdf.format(tDate);
//
//                parameters.put("CLIENT_INFO", c.getCompanyName() + "-" + c.getCode());
//                parameters.put("DATE_FROMTO", datefrom_to);
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Daily Total Boxes Deliveries");
//                hmap = Inventory.getInventoryBTotalDeliveriesPerGrowerDaily(fDate, tDate, c);
//                list = new ArrayList<InventoryBalance>(hmap.values());
//
//            } else if (selectedReport.getValue().equals(InventoryTemplate.BoxDeliveryTransactionList)) {
//
//
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                String cnames = "";
//                Client c = null;
//                if (kv != null && kv.getValue() != null) {
//                    c = (Client) kv.getValue();
//                    cnames = c.getCompanyName();
//                } else {
//                    cnames = "All";
//                }
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (from) dates.! ");
//                }
//                if (tDate == null) {
//                    throw new TransactionException("Plese enter correct (to) dates.! ");
//                }
//
//                if (fDate.after(tDate)) {
//                    throw new TransactionException("Plese enter correct dates.!\n(to) date must be greater than (from) date");
//                }
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = sdf.format(fDate) + " - " + sdf.format(tDate);
//
//                parameters.put("DATE_FROMTO", datefrom_to);
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Box Deliveries List");
//                parameters.put("CLIENT_INFO", cnames);
//                //   parameters.put("INVENTORY_TYPE", it.name());
//                list = Inventory.getBoxDeliveriesList(fDate, tDate, c);
//
//
//            } else if (InvoiceType.valueOf(selectedReport.getValue().toString()) != null) {
//
//                InvoiceType it = InvoiceType.valueOf(selectedReport.getValue().toString());
//                KeyValue kv = (KeyValue) comboClient.getSelectedItem();
//                String cnames = "";
//                Client c = null;
//                if (kv != null && kv.getValue() != null) {
//                    c = (Client) kv.getValue();
//                    cnames = c.getCompanyName();
//                } else {
//                    cnames = "All";
//                }
//
//                if (fDate == null) {
//                    throw new TransactionException("Plese enter correct (from) dates.! ");
//                }
//                if (tDate == null) {
//                    throw new TransactionException("Plese enter correct (to) dates.! ");
//                }
//
//                if (fDate.after(tDate)) {
//                    throw new TransactionException("Plese enter correct dates.!\n(to) date must be greater than (from) date");
//                }
//
//                SimpleDateFormat sdf = MyDateFormatter.getSimpleDateTimeFormatter();
//                String datefrom_to = sdf.format(fDate) + " - " + sdf.format(tDate);
//
//                parameters.put("DATE_FROMTO", datefrom_to);
//                parameters.put("REPORT_TITLE", cs.getCompanyName() + " - Invoice List");
//                parameters.put("CLIENT_INFO", cnames);
//                parameters.put("INVENTORY_TYPE", it.name());
//                list = Inventory.getInvoiceList(fDate, tDate, c, it);
//
//
//            } else {
//                throw new TransactionException("Report file not found");
//            }
//
//            if (list == null) {
//                list = new ArrayList<InventoryBalance>();
//            }
//
//            String filename = "";
//            try {
//                if (InvoiceType.valueOf(selectedReport.getValue().toString()) != null) {
//                    filename = "DeliveryReport";
//                }
//            } catch (IllegalArgumentException ex) {
//                filename = selectedReport.getValue().toString();
//            }
//
//            ReportViewerFactory rv = new ReportViewerFactory(filename, parameters, list);
//            jrv = rv.getReport(checkDJ);
//
//            if (jrv != null) {
//                panelReportViewer.removeAll();
//                panelReportViewer.add(jrv);
//                panelReportViewer.updateUI();
//            }
//        } catch (NullPointerException ex) {
//            JOptionErrorMessage.showErrorMessage(this.getClass().getCanonicalName(), ex);
//            panelReportViewer.removeAll();
//        } catch (FileNotFoundException ex) {
//            JOptionErrorMessage.showErrorMessage(this.getClass().getCanonicalName(), ex);
//            panelReportViewer.removeAll();
//        } catch (JRException ex) {
//            JOptionErrorMessage.showErrorMessage(this.getClass().getCanonicalName(), ex);
//            panelReportViewer.removeAll();
//        } catch (TransactionException ex) {
//            JOptionErrorMessage.showErrorMessage(this.getClass().getCanonicalName(), ex.getSimpleMessage());
//            panelReportViewer.removeAll();
//        } catch (Exception ex) {
//            JOptionErrorMessage.showErrorMessage(this.getClass().getCanonicalName(), ex);
//            panelReportViewer.removeAll();
//        }

        btnGenerate.setEnabled(true);
    }

    private void comboReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboReportsActionPerformed
        if (isInitializing) {
            return;
        }


//        jLabel9.setText("From Date");
//        JComboBox jcb = (JComboBox) evt.getSource();
//        selectedReport = (KeyValue) jcb.getSelectedItem();
//
//        if (selectedReport.getValue().equals("Separator")) {
//            initScreen(false);
//            comboClient.setEnabled(false);
//            return;
//        }
//
//        if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalance)) {
//            initScreen(false);
//            comboClient.setEnabled(false);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceSupplier)) {
//            initScreen(false);
//            comboClient.setEnabled(true);
//            initComboBox(ClientType.Vendor);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalancePerGrower)) {
//            initScreen(false);
//            comboClient.setEnabled(true);
//            initComboBox(ClientType.Grower);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalancePerGrowerWeekly)) {
//            initScreen(true);
//
//            jLabel9.setText("Cut off Date");
//            txtToDate.setEnabled(false);
//            comboClient.setEnabled(true);
//            initComboBox(ClientType.Grower);
//
//
//        } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceAllGrower)) {
//            initScreen(false);
//            comboClient.setEnabled(false);
//            comboClient.setSelectedIndex(-1);
//
//        } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceAllGrowerWeekly)) {
//            initScreen(true);
//            jLabel9.setText("Cut off Date");
//            txtToDate.setEnabled(false);
//            comboClient.setEnabled(false);
//            comboClient.setSelectedIndex(-1);
//
//        } else if (selectedReport.getValue().equals(InventoryTemplate.InventoryBalanceAllGrowerCrossTab)) {
//            initScreen(false);
//            comboClient.setEnabled(false);
//            comboClient.setSelectedIndex(-1);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.TotalDeliveriesAllGrower)) {
//            initScreen(true);
//            comboClient.setEnabled(false);
//            comboClient.setSelectedIndex(-1);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.TotalDeliveriesPerGrowerWeekly)) {
//            initScreen(true);
//            comboClient.setEnabled(true);
//            comboClient.setSelectedIndex(-1);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.TotalDeliveriesPerGrowerDaily)) {
//            initScreen(true);
//            comboClient.setEnabled(true);
//            comboClient.setSelectedIndex(-1);
//        } else if (selectedReport.getValue().equals(InventoryTemplate.BoxDeliveryTransactionList)) {
//            initScreen(true);
//            comboClient.setEnabled(true);
//            comboClient.setSelectedIndex(-1);
//        } else if (InvoiceType.valueOf(selectedReport.getValue().toString()) != null) {
//            initScreen(true);
//            comboClient.setEnabled(true);
//            comboClient.setSelectedIndex(-1);
//        }
    }//GEN-LAST:event_comboReportsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboClient;
    private javax.swing.JComboBox comboReports;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelGrower;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel panelReportViewer;
    private javax.swing.JPanel panelTop;
    private javax.swing.JPanel panelTransactionDate;
    private org.jdesktop.swingx.JXDatePicker txtFromDate;
    private org.jdesktop.swingx.JXDatePicker txtToDate;
    // End of variables declaration//GEN-END:variables
    KeyValue kvnull = new KeyValue(" ", null);

    private void initComboBoxes() {
        try {
            isInitializing = true;
            for (KeyValue kv : getReportList()) {
                comboReports.addItem(kv);
            }

//            comboClient.addItem(kvnull);
//            for (Client c : Client.getAllClients(ClientType.Grower, ClientType.Vendor)) {
//                KeyValue kv = new KeyValue(c.getCompanyName() + "-" + c.getClientType(), c);
//                comboClient.addItem(kv);
//            }

            comboReports.setSelectedItem(null);
            comboClient.setSelectedItem(kvnull);
            isInitializing = false;
        } catch (Exception ex) {
            Logger.getLogger(EmployeeReport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    private void initComboBox(ClientType ct) {
//        try {
//            isInitializing = true;
//            comboClient.removeAllItems();
//            comboClient.addItem(kvnull);
//            for (Client c : Client.getAllClients(ct)) {
//                KeyValue kv = new KeyValue(c.getCompanyName() + "-" + c.getClientType(), c);
//                comboClient.addItem(kv);
//            }
//
//            comboClient.setSelectedItem(kvnull);
//            isInitializing = false;
//        } catch (Exception ex) {
//            Logger.getLogger(EmployeeReport.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }

    private void initScreen(boolean s) {
        comboClient.setEnabled(s);
        iniDatesText(s);
    }

    private void iniDatesText(boolean s) {
        txtFromDate.setEnabled(s);
        txtToDate.setEnabled(s);
    }

    private void initLoans() {
    }

    private void saveScreen() {
    }

    private List<KeyValue> getReportList() {

        List<KeyValue> list = new ArrayList<KeyValue>();
//        KeyValue kv1 = new KeyValue("Inventory On Hand", InventoryTemplate.InventoryBalance);
//        KeyValue kv2 = new KeyValue("Inventory Balance(Supplier)", InventoryTemplate.InventoryBalanceSupplier);
//        KeyValue kv3 = new KeyValue("Inventory Balance Per Grower", InventoryTemplate.InventoryBalancePerGrower);
//        KeyValue kv4 = new KeyValue("Inventory Balance Per Grower By Weekly ", InventoryTemplate.InventoryBalancePerGrowerWeekly);
//        KeyValue kv5 = new KeyValue("Inventory Balance All Grower", InventoryTemplate.InventoryBalanceAllGrower);
//        KeyValue kv6 = new KeyValue("Inventory Balance All Grower By Weekly ", InventoryTemplate.InventoryBalanceAllGrowerWeekly);
//        KeyValue kv7 = new KeyValue("Inventory Balance All Grower(crosstab)", InventoryTemplate.InventoryBalanceAllGrowerCrossTab);
//        KeyValue kv8 = new KeyValue("Inventory Balance All Grower(Box Delivery)", InventoryTemplate.TotalDeliveriesAllGrower);
//        KeyValue kv9 = new KeyValue("Inventory Balance Per Grower(Weekly Box Delivery)", InventoryTemplate.TotalDeliveriesPerGrowerWeekly);
//        KeyValue kv10 = new KeyValue("Inventory Balance Per Grower(Daily Box Delivery)", InventoryTemplate.TotalDeliveriesPerGrowerDaily);
//        KeyValue kv101 = new KeyValue("Box Delivery Transaction List", InventoryTemplate.BoxDeliveryTransactionList);
//        KeyValue kv11 = new KeyValue("-----------------", "Separator");
//
//        KeyValue kv12 = new KeyValue("Receiving List", InvoiceType.Receiving.name());
//        KeyValue kv13 = new KeyValue("Delivery List", InvoiceType.Deliveries.name());
//        KeyValue kv14 = new KeyValue("Trucking List", InvoiceType.Trucking.name());
//        KeyValue kv15 = new KeyValue("Returns List", InvoiceType.Returns.name());
//        KeyValue kv16 = new KeyValue("Adjustment List", InvoiceType.Adjustment.name());
////        KeyValue kv17 = new KeyValue("Purchase List", InvoiceType.Purchase.name());
////        KeyValue kv18 = new KeyValue("Sales List", InvoiceType.Sales.name());
//        KeyValue kv19 = new KeyValue("OnHand List", InvoiceType.OnHand.name());
//
//        list.add(kv1);
//        list.add(kv2);
//        list.add(kv3);
//        list.add(kv4);
//        list.add(kv5);
//        list.add(kv6);
//        list.add(kv7);
//        list.add(kv8);
//        list.add(kv9);
//        list.add(kv10);
//        list.add(kv101);
//        list.add(kv11);
//
//        list.add(kv12);
//        list.add(kv13);
//        list.add(kv14);
//        list.add(kv15);
//        list.add(kv16);
////        list.add(kv17);
////        list.add(kv18);
//        list.add(kv19);

        return list;
    }
}
