/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainApp2.java`
 *
 * Created on Sep 23, 2010, 8:34:11 AM
 */
package com.jcl.main;

import com.jcl.dbms.dbms;
import com.jcl.login.LoginDialog;
import com.jcl.verycommon.MLogger;
import com.jcl.observables.MessagePanelObservable;
import com.jcl.observables.PanelMessage;
import com.jcl.model.User;
import com.jcl.settings.ui.ApplicationSetting;
import com.jcl.utils.JPanelProgress;
import com.jcl.utils.JPanelSetupProgress;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;

/**
 *
 * @author jlavador
 */
@Component
public class MainApp extends JFrame implements Observer {

    String windowTitle = "HJR Internation Corp.";
    // static final Logger logger = Logger.getLogger("app_log");
    private static MessagePanelObservable messagePanelObservable;
    ArrayList<String> openPanels;
    public static  ApplicationContext context;

    /**
     * Creates new form MainApp2
     */
    public MainApp() {


        this.setTitle(windowTitle);

        dbms.setProperties();
        System.out.println(dbms.codebaseReports);

        try {

            String system = UIManager.getSystemLookAndFeelClassName();
            String cross = UIManager.getCrossPlatformLookAndFeelClassName();

            UIManager.setLookAndFeel(system);

        } catch (Exception e) {
            // If Nimbus is not available, you can set the GUI to another look and feel.
        }

        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        //this.setSize(screenSize);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);     
        openPanels = new ArrayList<String>();
        jPanel1.add(new JPanelSetupProgress());
      
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        tabbedPaneMain = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jButton6 = new javax.swing.JButton();
        panelBottom = new javax.swing.JPanel();
        panel1 = new javax.swing.JPanel();
        lblStatusMessage = new javax.swing.JLabel();
        panel2 = new javax.swing.JPanel();
        panel3 = new javax.swing.JPanel();
        btnConnect = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miSetting = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        mEmployee = new javax.swing.JMenu();
        miPayslip = new javax.swing.JMenuItem();
        miDtr = new javax.swing.JMenuItem();
        miPayroll = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        miEmployee = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miReport1 = new javax.swing.JMenuItem();
        miReport2 = new javax.swing.JMenuItem();
        menuOpenWindows = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        tabbedPaneMain.setOpaque(true);
        jPanel1.add(tabbedPaneMain);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton6.setIcon(new javax.swing.ImageIcon("D:\\hgh\\wlloryap\\src\\main\\resources\\doc.png")); // NOI18N
        jButton6.setText("Payslip");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        panelBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBottom.setLayout(new java.awt.GridBagLayout());

        panel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panel1.add(lblStatusMessage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        panelBottom.add(panel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        panelBottom.add(panel2, gridBagConstraints);

        panel3.setLayout(new java.awt.GridBagLayout());

        btnConnect.setBorder(null);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panel3.add(btnConnect, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panel3.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panelBottom.add(panel3, gridBagConstraints);

        getContentPane().add(panelBottom, java.awt.BorderLayout.PAGE_END);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mFile.setText("File");

        miSetting.setText("Settings");
        miSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        mFile.add(miSetting);
        mFile.add(jSeparator1);

        miExit.setText("Exit");
        mFile.add(miExit);

        jMenuBar1.add(mFile);

        mEmployee.setText("Payroll");

        miPayslip.setText("Payslip");
        miPayslip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        mEmployee.add(miPayslip);

        miDtr.setText("Daily Time Record");
        miDtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        mEmployee.add(miDtr);

        miPayroll.setText("Payroll Period");
        miPayroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        mEmployee.add(miPayroll);
        mEmployee.add(jSeparator4);

        miEmployee.setText("Employee");
        miEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        mEmployee.add(miEmployee);

        jMenuBar1.add(mEmployee);

        jMenu1.setText("Reports");

        miReport1.setText("Employee Report");
        miReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        jMenu1.add(miReport1);

        miReport2.setText("Report2");
        miReport2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        jMenu1.add(miReport2);

        jMenuBar1.add(jMenu1);

        menuOpenWindows.setText("Windows");
        jMenuBar1.add(menuOpenWindows);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemActionPerformed
        String panelName = "";

        if (evt.getSource() instanceof JMenuItem) {
            JMenuItem jmi = (JMenuItem) evt.getSource();
            panelName = jmi.getAccessibleContext().getAccessibleName();
        } else if (evt.getSource() instanceof JButton) {
            JButton jbtn = (JButton) evt.getSource();
            panelName = jbtn.getAccessibleContext().getAccessibleName();
        }

        System.out.println("AccessibleName: " + panelName);
        if (openPanels.contains(panelName)) {
            int index = tabbedPaneMain.indexOfTab(panelName);
            tabbedPaneMain.setSelectedIndex(index);
        } else {

            JMenuItem mItem = new JMenuItem(panelName);
            mItem.setActionCommand(panelName);
            mItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    int index = tabbedPaneMain.indexOfTab(e.getActionCommand());
                    tabbedPaneMain.setSelectedIndex(index);

                }
            });
            menuOpenWindows.add(mItem);
            openPanels.add(panelName);
            openTabPanel(panelName);

        }

    }//GEN-LAST:event_menuItemActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            JOptionPane.showMessageDialog(null, "This will close all open panel..");
            //       int count = menuOpenWindows.getItemCount();
            //        for (int i = 0; i < count; i++) {
            //            JMenuItem jm = menuOpenWindows.getItem(i);
            //            int index = tabbedPaneMain.indexOfTab(jm.getText());
            //            tabbedPaneMain.removeTabAt(index);
            //
            //        }
            tabbedPaneMain.removeAll();
            menuOpenWindows.removeAll();
            openPanels = new ArrayList<String>();

        } catch (Exception ex) {
            Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void openTabPanel(String panel) {
        int observers = messagePanelObservable.countObservers();
        System.out.println("observer count");
        if(observers == 0){
            messagePanelObservable.addObserver(this);
        }         
        if (panel.equals("Employee")) {

            com.jcl.payroll.ui.EmployeeInformation employeeInformationUI = context.getBean(com.jcl.payroll.ui.EmployeeInformation.class);
            employeeInformationUI.setup();
            tabbedPaneMain.add(panel, employeeInformationUI);
        } else if (panel.equals("Settings")) {
            com.jcl.settings.ui.ApplicationSetting applicationSettingUI = context.getBean(com.jcl.settings.ui.ApplicationSetting.class);
            applicationSettingUI.setup();
            tabbedPaneMain.add(panel, applicationSettingUI);
        } else if (panel.equals("Payroll Period")) {
            com.jcl.payroll.ui.PayrollPeriodInformation ppi = context.getBean(com.jcl.payroll.ui.PayrollPeriodInformation.class);
            ppi.setup();
            tabbedPaneMain.add(panel, ppi);
        } else if (panel.equals("Daily Time Record")) {
            com.jcl.payroll.ui.DTRInformation dtrInformationUI = context.getBean(com.jcl.payroll.ui.DTRInformation.class);
            dtrInformationUI.setup();
            tabbedPaneMain.add(panel, dtrInformationUI);
        } else if (panel.equals("Payslip")) {
            com.jcl.payroll.ui.PaySlipInformation psi = context.getBean(com.jcl.payroll.ui.PaySlipInformation.class);
            psi.setup();
            tabbedPaneMain.add(panel, psi);
        } else if (panel.equals("Employee Report")) {
            com.jcl.reports.EmployeeReport er = context.getBean(com.jcl.reports.EmployeeReport.class);
            er.setup();                    
            tabbedPaneMain.add(panel, er);
        } else if (panel.equals("Report2")) {
            com.jcl.payroll.ui.PaySlipInformation psi = context.getBean(com.jcl.payroll.ui.PaySlipInformation.class);
            psi.setup();
            tabbedPaneMain.add(panel, psi);
        }


        System.out.println("Panel: " + panel);
        tabbedPaneMain.setSelectedIndex(tabbedPaneMain.indexOfTab(panel));


    }

    public void initSpringFramework(){
        Thread r = new Thread(new Runnable() {

            @Override
            public void run() {
                System.out.println("starting....");
                 context = new ClassPathXmlApplicationContext("/applicationContext.xml");
                 System.out.println("end.");
                 jPanel1.remove(1);
                 jPanel1.updateUI();
                 messagePanelObservable = context.getBean(com.jcl.observables.MessagePanelObservable.class);          
                
            }
        });
        r.start();
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        MLogger.init();
        //context = new ClassPathXmlApplicationContext("/applicationContext.xml");
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                 
              
                MainApp ma = new MainApp();
                ma.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/RGBicon.png")).getImage());

                ma.setVisible(true);            
                ma.initSpringFramework();
                
//                User u = new User();
//                u.setUsername("admin");
//                u.setPassword("password");
//
//                dbms.user = u;
//                System.out.println("main user: " + dbms.user.getUsername());
//                LoginDialog ld = new LoginDialog(ma, true);
//                ld.setLocationRelativeTo(ma);
//                ld.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblStatusMessage;
    private javax.swing.JMenu mEmployee;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenu menuOpenWindows;
    private javax.swing.JMenuItem miDtr;
    private javax.swing.JMenuItem miEmployee;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miPayroll;
    private javax.swing.JMenuItem miPayslip;
    private javax.swing.JMenuItem miReport1;
    private javax.swing.JMenuItem miReport2;
    private javax.swing.JMenuItem miSetting;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JTabbedPane tabbedPaneMain;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof PanelMessage) {

            PanelMessage pm = (PanelMessage) arg;
            System.out.println("removing: " + pm.getPanelName());
            System.out.println("openpanel count: " + openPanels.size());
            System.out.println("tabbedPaneMain count: " + tabbedPaneMain.getTabCount());
            if (pm.getPanelAction().equals("remove")) {
                openPanels.remove(pm.getPanelName());
                int index = tabbedPaneMain.indexOfTab(pm.getPanelName());
                if (index != -1) {
                    tabbedPaneMain.remove(index);
                    int count = menuOpenWindows.getItemCount();
                    for (int i = 0; i < count; i++) {
                        JMenuItem jm = menuOpenWindows.getItem(i);
                        if (jm.getText().equals(pm.getPanelName())) {
                            menuOpenWindows.remove(jm);
                            break;
                        }
                    }
                }
            }
        }

    }
    
    public static MessagePanelObservable getMessagePanelObservable(){
        if(messagePanelObservable == null){
            System.out.println("messagePanelObservable is null");
            messagePanelObservable = context.getBean(com.jcl.observables.MessagePanelObservable.class);          
        }
        return messagePanelObservable;
    }
}
